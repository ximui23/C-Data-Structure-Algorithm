
/*
 A deque is a data structure consisting of a list of items on which the following
 operations are possible:
 push(x): Insert item x on the front end of the deque.
 pop(): Remove the front item from the deque and return it.
 inject(x): Insert item x on the rear end of the deque.
 eject(): Remove the rear item from the deque and return it.
 Write routines to support the deque that take O(1) time per operation.
 
 */
 
#include <iostream>
#include "Deque.hpp"
 
using namespace std;
 
class Deque
{
   
    int array[100];
    int head;
    int tail;
    int size;
 
public:
    Deque(int size)
    {
        head = -1;
        tail = 0;
        this->size = size;
    }
 
    void push(int x);
    void pop();
    void inject(int x);
    void eject();
 
};
 
void Deque::push(int x)
{
    if((head == 0 && tail == size - 1) || (head == tail + 1))
    {
        cout << "Overflow. " << endl;
        return;
    }
    
    if (head == -1)
    {
        head = 0;
        tail = 0;
    }
    else if(head == 0)
    {
        head = size - 1;
    }
    else
        tail = tail + 1;
        array[tail] = x;
        cout << x << " is being pushed." << endl;
    
    }
 
 
void Deque::inject(int x)
{
    if((head == 0 && tail == size - 1) || (head == tail + 1))
    {
        cout << "Overflow. " << endl;
        return;
    }
    //if queue is not full
    //if queue is empty -> move front and rear to index 0
    if (head == -1)
    {
        head = 0;
        tail = 0;
    }
    //if rear at the last index of array -> increment rear to the '0' index of array
    //because rear starts from left to right (index 0 -> size - 1)
    else if(tail == size - 1)
    {
        tail = 0;
    }
    //if the rear is is the middle of array
    //increment rear and assign x to be the new rear's data
    else
 
        head = head - 1;
        array[head] = x;
        cout << x << " is injected at the rear end." << endl;
    
    
}
 
void Deque::pop()
{
    if(head == -1)
    {
        cout << "The queue is empty. " << endl;
        return;
    }
    
    if(head == tail)
    {
        head = -1;
        tail = -1;
    }
    else
    {
        if(head == size - 1)
        {
            head = 0;
        }
        else{
            head = head + 1;
        }
        cout << "Pop from the front end." << endl;
    }
}
 
void Deque::eject()
{
    if(head == -1)
    {
        cout << "The queue is empty. " << endl;
        return;
    }
    
    if(head == tail)
    {
        head = -1;
        tail = -1;
    }
    else if (tail == 0)
    {
        tail = size - 1;
    }
    else{
        tail = tail - 1;
    }
    cout << "Eject from the rear end. " << endl;
}
 
int main()
{
 
    Deque queue(5);
    
    queue.push(6);
    queue.push(8);
    queue.push(4);
    queue.push(2);
    queue.inject(9);
 
    queue.pop();
    queue.push(3);
    
    queue.eject();
    queue.inject(7);
    
    return 0;
}


